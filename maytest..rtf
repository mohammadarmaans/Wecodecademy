{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red215\green215\blue217;\red31\green31\blue36;\red161\green103\blue230;
\red255\green255\blue255;\red197\green180\blue86;\red142\green74\blue224;\red252\green95\blue163;\red222\green193\blue255;
\red114\green191\blue174;\red196\green146\blue255;\red80\green207\blue255;\red65\green162\blue192;\red158\green241\blue221;
\red204\green186\blue68;}
{\*\expandedcolortbl;;\cssrgb\c87451\c87451\c87843;\cssrgb\c16078\c16471\c18824;\cssrgb\c69804\c50588\c92157;
\cssrgb\c100000\c100000\c100000;\cssrgb\c81569\c74902\c41176;\cssrgb\c63137\c40392\c90196;\cssrgb\c100000\c47843\c69804;\cssrgb\c89804\c81176\c100000;
\cssrgb\c51373\c78824\c73725;\cssrgb\c81569\c65882\c100000;\cssrgb\c36471\c84706\c100000;\cssrgb\c30588\c69412\c80000;\cssrgb\c67451\c94902\c89412;
\cssrgb\c83922\c76863\c33333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 JAVA SCRIPT \cf4 \strokec4 TEST\cf2 \strokec2  \cf5 \strokec5 (\cf6 \strokec6 10\cf2 \strokec2  MAY\cf5 \strokec5 )\cf2 \strokec2  \cb1 \
\
\cb3 Que1.)\cb1 \
\cb3  What is Javascript Engine
\f1\b \cf7 \strokec7 ?
\f0\b0 \cf2 \strokec2  Name the most famous Javascript engines. \cb1 \
\
\cb3 Ans1. )\cb1 \
\cb3 Javascript engines are used for interpreting the Javascript codes , it helps us to interpret the javascript and make it machine under stable  code 
\f1\b \cf8 \strokec8 as
\f0\b0 \cf2 \strokec2  \cf9 \strokec9 browser\cf2 \strokec2  \cf9 \strokec9 can\cf2 \strokec2  \cf9 \strokec9 read\cf2 \strokec2  \cf9 \strokec9 and\cf2 \strokec2  \cf9 \strokec9 understand\cf2 \strokec2  \cf9 \strokec9 the\cf2 \strokec2  \cf9 \strokec9 javascript\cf2 \strokec2  \cf9 \strokec9 but\cf2 \strokec2   \cf9 \strokec9 the\cf2 \strokec2  \cf9 \strokec9 machines\cf2 \strokec2  \cf9 \strokec9 Or\cf2 \strokec2  \cf9 \strokec9 computers\cf2 \strokec2  \cf9 \strokec9 can\cf2 \strokec2 \'92\cf9 \strokec9 t\cf2 \strokec2  \cf9 \strokec9 understand\cf2 \strokec2  \cf9 \strokec9 the\cf2 \strokec2  \cf9 \strokec9 Javascripts\cf2 \strokec2  \cf9 \strokec9 so\cf2 \strokec2  \cf9 \strokec9 we\cf2 \strokec2  \cf9 \strokec9 need\cf2 \strokec2  \cf9 \strokec9 a\cf2 \strokec2  \cf9 \strokec9 program\cf2 \strokec2  \cf9 \strokec9 to\cf2 \strokec2  \cf9 \strokec9 which\cf2 \strokec2  \cf9 \strokec9 helps\cf2 \strokec2  \cf9 \strokec9 ur\cf2 \strokec2  \cf9 \strokec9 to\cf2 \strokec2  \cf9 \strokec9 convert\cf2 \strokec2  \cf9 \strokec9 the\cf2 \strokec2  \cf9 \strokec9 javascript\cf2 \strokec2  \cf9 \strokec9 program\cf2 \strokec2  \cf9 \strokec9 to\cf2 \strokec2  \cf9 \strokec9 a\cf2 \strokec2  \cf9 \strokec9 computer\cf2 \strokec2  \cf9 \strokec9 under\cf2 \strokec2  \cf9 \strokec9 stable\cf2 \strokec2  \cf9 \strokec9 language\cf2 \strokec2 .\cb1 \
\cb3   \cb1 \
\cb3 There are many javascript engines
\f1\b \cf7 \strokec7 :
\f0\b0 \cf2 \strokec2  \cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 1.\cf2 \strokec2  Spider Monkey \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 It is used by Mozilla \cb1 \
\cb3 2.\cf10 \strokec10 V8\cf2 \strokec2  \cb1 \
\cb3 It is used by Google\cb1 \
\
\cb3 V8 is the most pf the famous Javascript Engines. \cb1 \
\
\
\
\cb3 Que2.) \cb1 \
\cb3 Explain the use 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  
\f1\b \cf8 \strokec8 this
\f0\b0 \cf2 \strokec2  keyword
\f1\b \cf7 \strokec7 ?
\f0\b0 \cf2 \strokec2  What are the different uses 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  
\f1\b \cf8 \strokec8 this
\f0\b0 \cf2 \strokec2  keyword.  \cb1 \
\
\cb3 Ans2.) \cb1 \
\cb3 If we want to access the properties or values 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  the same object 
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  an fuction than we use the \'93
\f1\b \cf8 \strokec8 this
\f0\b0 \cf2 \strokec2  keyword\'94 \cb1 \
\cb3 So we don\'92t need to write name the object again and again. \cb1 \
\cb3 When we are making a 
\f1\b \cf8 \strokec8 function
\f0\b0 \cf11 \strokec11  \cf12 \strokec12 and\cf11 \strokec11  \cf12 \strokec12 this\cf11 \strokec11  \cf12 \strokec12 function\cf11 \strokec11  \cf12 \strokec12 is\cf11 \strokec11  \cf12 \strokec12 called\cf11 \strokec11  \cf12 \strokec12 as\cf11 \strokec11  \cf12 \strokec12 a\cf11 \strokec11  \cf12 \strokec12 object\cf11 \strokec11   \cf12 \strokec12 the\cf11 \strokec11  \'93\cf12 \strokec12 this\cf11 \strokec11 \'94 \cf12 \strokec12 keyword\cf11 \strokec11  \cf12 \strokec12 will\cf11 \strokec11  \cf12 \strokec12 called\cf11 \strokec11  \cf12 \strokec12 as\cf11 \strokec11  \cf12 \strokec12 an\cf11 \strokec11  \cf12 \strokec12 object\cf11 \strokec11  \cf12 \strokec12 and\cf11 \strokec11  \cf12 \strokec12 if\cf11 \strokec11  \cf12 \strokec12 this\cf11 \strokec11  \cf12 \strokec12 function\cf11 \strokec11  \cf12 \strokec12 is\cf11 \strokec11  \cf12 \strokec12 standalone\cf11 \strokec11  \cf12 \strokec12 the\cf11 \strokec11  \'93\cf12 \strokec12 this\cf11 \strokec11 \'94 \cf12 \strokec12 keyword\cf11 \strokec11  \cf12 \strokec12 will\cf11 \strokec11  \cf12 \strokec12 refers\cf11 \strokec11  \cf12 \strokec12 to\cf11 \strokec11  \cf12 \strokec12 a\cf11 \strokec11  \cf12 \strokec12 global\cf11 \strokec11  \cf12 \strokec12 object\cf11 \strokec11 .  \cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 Que3\cf11 \strokec11 .) \cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 Difference\cf11 \strokec11  \cf12 \strokec12 between\cf11 \strokec11  \cf12 \strokec12 Json\cf11 \strokec11  \cf12 \strokec12 and\cf11 \strokec11  \cf12 \strokec12 XML\cf11 \strokec11 ? \cf2 \cb1 \strokec2 \
\
\cf12 \cb3 \strokec12 Ans3\cf11 \strokec11 .) \cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 XML\cf11 \strokec11 : \cf12 \strokec12 XML\cf11 \strokec11  \cf12 \strokec12 is\cf11 \strokec11  \cf12 \strokec12 Extensible\cf11 \strokec11  \cf12 \strokec12 Markup\cf11 \strokec11  \cf12 \strokec12 Language\cf11 \strokec11  \cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 It\cf11 \strokec11  \cf12 \strokec12 is\cf11 \strokec11  \cf12 \strokec12 markup\cf11 \strokec11  \cf12 \strokec12 language\cf11 \strokec11  \cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 Helps\cf11 \strokec11  \cf12 \strokec12 to\cf11 \strokec11  \cf12 \strokec12 store\cf11 \strokec11  \cf12 \strokec12 and\cf11 \strokec11  \cf12 \strokec12 transfer\cf11 \strokec11  \cf12 \strokec12 data\cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 XML\cf11 \strokec11  \cf12 \strokec12 uses\cf11 \strokec11  \cf12 \strokec12 tags\cf11 \strokec11  \cf12 \strokec12 like\cf11 \strokec11  \'93\cf2 \strokec2 <>\cf11 \strokec11  \cf2 \strokec2 <\cf11 \strokec11 \\\cf2 \strokec2 >\cf11 \strokec11 \'94\cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 And\cf11 \strokec11  \cf12 \strokec12 Xml\cf11 \strokec11  \cf12 \strokec12 also\cf11 \strokec11  \cf12 \strokec12 helps\cf11 \strokec11  \cf12 \strokec12 in\cf11 \strokec11  \cf12 \strokec12 storing\cf11 \strokec11  \cf12 \strokec12 the\cf11 \strokec11  \cf12 \strokec12 data\cf11 \strokec11  \cf12 \strokec12 of\cf11 \strokec11  \cf12 \strokec12 a\cf11 \strokec11  \cf12 \strokec12 software\cf11 \strokec11  \cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 Remains\cf11 \strokec11  \cf12 \strokec12 same\cf11 \strokec11  \cf12 \strokec12 for\cf11 \strokec11  \cf12 \strokec12 all\cf11 \strokec11  \cf12 \strokec12 languages\cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 It\cf11 \strokec11  \cf12 \strokec12 not\cf11 \strokec11  \cf12 \strokec12 supports\cf11 \strokec11  \cf12 \strokec12 array\cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 It\cf11 \strokec11  \cf12 \strokec12 is\cf11 \strokec11  \cf12 \strokec12 used\cf11 \strokec11  \cf12 \strokec12 representation\cf11 \strokec11  \cf12 \strokec12 of\cf11 \strokec11  \cf12 \strokec12 datas\cf2 \cb1 \strokec2 \
\
\cf12 \cb3 \strokec12 Json\cf11 \strokec11 : \cf12 \strokec12 Javascript\cf11 \strokec11  \cf12 \strokec12 Object\cf11 \strokec11  \cf12 \strokec12 notation\cf11 \strokec11   \cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 If\cf11 \strokec11  \cf12 \strokec12 isn\cf11 \strokec11   \cf12 \strokec12 data\cf11 \strokec11  \cf12 \strokec12 format\cf2 \cb1 \strokec2 \
\cf12 \cb3 \strokec12 json\cf11 \strokec11  \cf12 \strokec12 don\cf11 \strokec11 \'92\cf12 \strokec12 t\cf11 \strokec11  \cf12 \strokec12 use\cf11 \strokec11  \cf12 \strokec12 tags\cf11 \strokec11  \cf12 \strokec12 it\cf11 \strokec11  \cf12 \strokec12 uses\cf11 \strokec11  \cf12 \strokec12 names\cf11 \strokec11  \cf12 \strokec12 and\cf11 \strokec11  \cf12 \strokec12 values\cf11 \strokec11  \cf12 \strokec12 it\cf11 \strokec11  \cf12 \strokec12 use\cf11 \strokec11  \cf12 \strokec12 brackets\cf11 \strokec11  \'93\cf2 \strokec2 \{\cf13 \strokec13  \cf2 \strokec2 \}\'94\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 It is also remains same for all languages \cb1 \
\cb3 Array support\cb1 \
\cb3 It represents objects  \cb1 \
\
\cb3 Que5.)Write difference between compiler and interpreter with example
\f1\b \cf7 \strokec7 ?
\f0\b0 \cf2 \strokec2  \cb1 \
\cb3  \cb1 \
\cb3 Ans5.) \cb1 \
\cb3 Compiler 
\f1\b \cf7 \strokec7 :
\f0\b0 \cf2 \strokec2  A compiler scans the entire program at once and then translate it into machine codes \cb1 \
\cb3 In compiler all 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  the error are shown at once and the program stops to execute so first we have to remove and correct all the errors from program then it will start working otherwise it does not executed \cb1 \
\cb3 Examples
\f1\b \cf7 \strokec7 :
\f0\b0 \cf2 \strokec2  C,C
\f1\b \cf7 \strokec7 ++
\f0\b0 \cf2 \strokec2 ,Javas\cb1 \
\cb3 Interpreter: \cb1 \
\cb3 A interpreter scans a program line by line by then translate them to a machine code \cb1 \
\cb3 Interpreter shows only one error 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  lines \cb1 \
\cb3 It is slower 
\f1\b \cf8 \strokec8 as
\f0\b0 \cf2 \strokec2  \cf9 \strokec9 compare\cf2 \strokec2  \cf9 \strokec9 to\cf2 \strokec2  \cf9 \strokec9 compiler\cf2 \strokec2  
\f1\b \cf8 \strokec8 as
\f0\b0 \cf2 \strokec2  \cf9 \strokec9 it\cf2 \strokec2  \cf9 \strokec9 shows\cf2 \strokec2  \cf6 \strokec6 1\cf2 \strokec2  \cf9 \strokec9 error\cf2 \strokec2  \cf9 \strokec9 of\cf2 \strokec2  \cf9 \strokec9 line\cf2 \strokec2  \cf9 \strokec9 of\cf2 \strokec2  \cf9 \strokec9 program\cf2 \strokec2  \cb1 \
\cb3  Example:python and Javascript. \cb1 \
\
\
\cb3 Que4.)Explain Heap, Cache, Stack, Ram Memory
\f1\b \cf7 \strokec7 ?
\f0\b0 \cf2 \strokec2  \cb1 \
\cb3 Ans4.) \cb1 \
\
\cb3 Chache Memory
\f1\b \cf7 \strokec7 :
\f0\b0 \cf2 \strokec2  Cache memory is the memory which used to store the files or data which we use the most or we use daily so it store the them and when we need that files it provides \cf13 \strokec13 us\cf2 \strokec2 . \cf10 \strokec10 And\cf2 \strokec2  it is volatile memory\cb1 \
\
\
\cb3 Heap Memory: Heap memory is non
\f1\b \cf7 \strokec7 -
\f0\b0 \cf2 \strokec2 primitive 
\f1\b \cf8 \strokec8 type
\f0\b0 \cf2 \strokec2  \cf9 \strokec9 of\cf2 \strokec2  memory \cb1 \
\cb3 In heap memory if we are doing or program or function then with that function we got a direct reference  (original form) of that function.\cb1 \
\cb3 As if we want to change the value or objects then we\'92ll change in the main file \cb1 \
\
\cb3 Stack Memory: Stack memory is primitive 
\f1\b \cf8 \strokec8 type
\f0\b0 \cf2 \strokec2  \cf9 \strokec9 of\cf2 \strokec2  memory\cb1 \
\cb3 In an Stack memory while we are doing a function the we get a copy of that program like the main variable of object will saved in stack and then  we make one more function the value of an object then this will also get saved in the stack and as another function executed the first one object from stack will removed.\cb1 \
\
\cb3 Stack memory 
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  computing system is memory location where data is stored and we can add or remove data from 
\f1\b \cf8 \strokec8 this
\f0\b0 \cf2 \strokec2  
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  the form 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  last 
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  and first out Manner and \cb1 \
\cb3 This is allocated 
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  the form 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  like blocks like example bunch 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  books, one book on another.\cf5 \strokec5 (\cf2 \strokec2 use key site h Jesse ki ek book ka bundle or Jesse ki ek book ke 
\f1\b \cf8 \strokec8 super
\f0\b0 \cf2 \strokec2  ek book\cf5 \strokec5 )\cf2 \strokec2  \cb1 \
\cb3  \cb1 \
\cb3 Ram Memory: Ram Memory is Random access Memory, it is direct access memory. \cb1 \
\cb3 This is Volatile Memory \cb1 \
\cb3 In Ram all the task performed by CPU and these are saved 
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  RAM memory 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  computer \cb1 \
\cb3 Ram is the very important thing 
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  a computer system because 
\f1\b \cf8 \strokec8 as
\f0\b0 \cf2 \strokec2  \cf9 \strokec9 we\cf2 \strokec2  \cf9 \strokec9 rum\cf2 \strokec2  \cf9 \strokec9 or\cf2 \strokec2  \cf9 \strokec9 use\cf2 \strokec2  \cf9 \strokec9 a\cf2 \strokec2  \cf9 \strokec9 computer\cf2 \strokec2  \cf9 \strokec9 system\cf2 \strokec2  \cf9 \strokec9 then\cf2 \strokec2  \cf9 \strokec9 computer\cf2 \strokec2  \cf9 \strokec9 need\cf2 \strokec2  \cf9 \strokec9 some\cf2 \strokec2  \cf9 \strokec9 storage\cf2 \strokec2  \cf9 \strokec9 to\cf2 \strokec2  \cf9 \strokec9 perform\cf2 \strokec2  \cf9 \strokec9 to\cf2 \strokec2  \cf9 \strokec9 work\cf2 \strokec2  \cf9 \strokec9 properly\cf2 \strokec2  \cf9 \strokec9 and\cf2 \strokec2  \cf14 \strokec14 this\cf2 \strokec2  \cf9 \strokec9 storage\cf2 \strokec2  \cf9 \strokec9 if\cf2 \strokec2  \cf9 \strokec9 provided\cf2 \strokec2  \cf9 \strokec9 by\cf2 \strokec2  \cf9 \strokec9 RAM\cf2 \strokec2 . \cb1 \
\
\cb3 Que7.)Difference between primitive and non
\f1\b \cf7 \strokec7 -
\f0\b0 \cf2 \strokec2 primitive data types
\f1\b \cf7 \strokec7 ?
\f0\b0 \cf2 \strokec2   \cb1 \
\
\cb3 Ans7.) \cb1 \
\cb3 Primitive Data types
\f1\b \cf7 \strokec7 :
\f0\b0 \cf2 \strokec2  Primitive data types stored 
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  form 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  values 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  main object and original values 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  object are cant changed.\cb1 \
\cb3  There are six types 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  data types \cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 1.\cf2 \strokec2  Number: It represents Numerical Values \cb1 \
\cf6 \cb3 \strokec6 2.\cf2 \strokec2  Boolean: It has logical values that are 
\f1\b \cf7 \strokec7 -
\f0\b0 \cf2 \strokec2  
\f1\b \cf15 \strokec15 true
\f0\b0 \cf2 \strokec2  
\f1\b \cf7 \strokec7 &
\f0\b0 \cf2 \strokec2  
\f1\b \cf15 \strokec15 false
\f0\b0 \cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6 3.\cf2 \strokec2  String: Used to represent text data or data 
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  single or double commas
\f1\b \cf7 \strokec7 -
\f0\b0 \cf5 \strokec5 (\cf2 \strokec2 \'91 \'92, \'93\'94\cf5 \strokec5 )\cf2 \strokec2  \cb1 \
\cf6 \cb3 \strokec6 4.\cf2 \strokec2  Symbol: Used to create to unique objects\cb1 \
\cf6 \cb3 \strokec6 5.\cf2 \strokec2  Null: Null means those data types which doesn\'92t have values \cb1 \
\cf6 \cb3 \strokec6 6.\cf2 \strokec2  Undefined: when we 
\f1\b \cf8 \strokec8 declare
\f0\b0 \cf2 \strokec2  a variable but the value is not assigned \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Non
\f1\b \cf7 \strokec7 -
\f0\b0 \cf2 \strokec2 primitive Data types: \cb1 \
\cb3 In  Non
\f1\b \cf7 \strokec7 -
\f0\b0 \cf2 \strokec2 primitive Data types values are stored 
\f1\b \cf8 \strokec8 with
\f0\b0 \cf2 \strokec2  references \cb1 \
\cb3 There are to types 
\f1\b \cf7 \strokec7 of
\f0\b0 \cf2 \strokec2  Non
\f1\b \cf7 \strokec7 -
\f0\b0 \cf2 \strokec2 primitive Data types : \cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 1.\cf2 \strokec2   Array : In Array we can add one or more elements 
\f1\b \cf7 \strokec7 in
\f0\b0 \cf2 \strokec2  an object\cb1 \
\cf6 \cb3 \strokec6 2.\cf2 \strokec2  Object : \cb1 \
\
\
\
\
\
}